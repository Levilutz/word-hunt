/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetGameResp,
  HTTPValidationError,
  PostMatchResp,
  SubmitWordsReq,
} from '../models/index';
import {
    GetGameRespFromJSON,
    GetGameRespToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PostMatchRespFromJSON,
    PostMatchRespToJSON,
    SubmitWordsReqFromJSON,
    SubmitWordsReqToJSON,
} from '../models/index';

export interface GameSetPlayerDoneGameGameIdDonePostRequest {
    gameId: string;
}

export interface GameSubmitWordsGameGameIdSubmitWordsPostRequest {
    gameId: string;
    submitWordsReq: SubmitWordsReq;
}

export interface GetGameGameGameIdGetRequest {
    gameId: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Cookie0
     */
    async cookie0Cookie0GetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/cookie0`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Cookie0
     */
    async cookie0Cookie0Get(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.cookie0Cookie0GetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Game Set Player Done
     */
    async gameSetPlayerDoneGameGameIdDonePostRaw(requestParameters: GameSetPlayerDoneGameGameIdDonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['gameId'] == null) {
            throw new runtime.RequiredError(
                'gameId',
                'Required parameter "gameId" was null or undefined when calling gameSetPlayerDoneGameGameIdDonePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/game/{game_id}/done`;
        urlPath = urlPath.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters['gameId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Game Set Player Done
     */
    async gameSetPlayerDoneGameGameIdDonePost(requestParameters: GameSetPlayerDoneGameGameIdDonePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.gameSetPlayerDoneGameGameIdDonePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Game Submit Words
     */
    async gameSubmitWordsGameGameIdSubmitWordsPostRaw(requestParameters: GameSubmitWordsGameGameIdSubmitWordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['gameId'] == null) {
            throw new runtime.RequiredError(
                'gameId',
                'Required parameter "gameId" was null or undefined when calling gameSubmitWordsGameGameIdSubmitWordsPost().'
            );
        }

        if (requestParameters['submitWordsReq'] == null) {
            throw new runtime.RequiredError(
                'submitWordsReq',
                'Required parameter "submitWordsReq" was null or undefined when calling gameSubmitWordsGameGameIdSubmitWordsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/game/{game_id}/submit-words`;
        urlPath = urlPath.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters['gameId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubmitWordsReqToJSON(requestParameters['submitWordsReq']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Game Submit Words
     */
    async gameSubmitWordsGameGameIdSubmitWordsPost(requestParameters: GameSubmitWordsGameGameIdSubmitWordsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.gameSubmitWordsGameGameIdSubmitWordsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Game
     */
    async getGameGameGameIdGetRaw(requestParameters: GetGameGameGameIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGameResp>> {
        if (requestParameters['gameId'] == null) {
            throw new runtime.RequiredError(
                'gameId',
                'Required parameter "gameId" was null or undefined when calling getGameGameGameIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/game/{game_id}`;
        urlPath = urlPath.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters['gameId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGameRespFromJSON(jsonValue));
    }

    /**
     * Get Game
     */
    async getGameGameGameIdGet(requestParameters: GetGameGameGameIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGameResp> {
        const response = await this.getGameGameGameIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Match
     */
    async matchMatchPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostMatchResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/match`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostMatchRespFromJSON(jsonValue));
    }

    /**
     * Match
     */
    async matchMatchPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostMatchResp> {
        const response = await this.matchMatchPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Ping
     */
    async pingPingGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/ping`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Ping
     */
    async pingPingGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.pingPingGetRaw(initOverrides);
        return await response.value();
    }

}
