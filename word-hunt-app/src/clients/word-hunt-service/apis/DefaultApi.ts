/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateGameReq,
  GetGameResp,
  HTTPValidationError,
} from '../models/index';
import {
    CreateGameReqFromJSON,
    CreateGameReqToJSON,
    GetGameRespFromJSON,
    GetGameRespToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface CreateGameGameCreatePostRequest {
    createGameReq: CreateGameReq;
}

export interface GetGameGameGameIdGetRequest {
    gameId: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create Game
     */
    async createGameGameCreatePostRaw(requestParameters: CreateGameGameCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGameResp>> {
        if (requestParameters['createGameReq'] == null) {
            throw new runtime.RequiredError(
                'createGameReq',
                'Required parameter "createGameReq" was null or undefined when calling createGameGameCreatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/game/create`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGameReqToJSON(requestParameters['createGameReq']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGameRespFromJSON(jsonValue));
    }

    /**
     * Create Game
     */
    async createGameGameCreatePost(requestParameters: CreateGameGameCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGameResp> {
        const response = await this.createGameGameCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Game
     */
    async getGameGameGameIdGetRaw(requestParameters: GetGameGameGameIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetGameResp>> {
        if (requestParameters['gameId'] == null) {
            throw new runtime.RequiredError(
                'gameId',
                'Required parameter "gameId" was null or undefined when calling getGameGameGameIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/game/{game_id}`;
        urlPath = urlPath.replace(`{${"game_id"}}`, encodeURIComponent(String(requestParameters['gameId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetGameRespFromJSON(jsonValue));
    }

    /**
     * Get Game
     */
    async getGameGameGameIdGet(requestParameters: GetGameGameGameIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetGameResp> {
        const response = await this.getGameGameGameIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Ping
     */
    async pingPingGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/ping`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Ping
     */
    async pingPingGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.pingPingGetRaw(initOverrides);
        return await response.value();
    }

}
