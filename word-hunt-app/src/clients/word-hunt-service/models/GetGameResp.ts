/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GameMode } from './GameMode';
import {
    GameModeFromJSON,
    GameModeFromJSONTyped,
    GameModeToJSON,
    GameModeToJSONTyped,
} from './GameMode';

/**
 * 
 * @export
 * @interface GetGameResp
 */
export interface GetGameResp {
    /**
     * 
     * @type {string}
     * @memberof GetGameResp
     */
    gameId: string;
    /**
     * 
     * @type {GameMode}
     * @memberof GetGameResp
     */
    gameMode: GameMode;
    /**
     * 
     * @type {Array<Array<string | null>>}
     * @memberof GetGameResp
     */
    grid: Array<Array<string | null>>;
    /**
     * 
     * @type {string}
     * @memberof GetGameResp
     */
    status: GetGameRespStatusEnum;
}


/**
 * @export
 */
export const GetGameRespStatusEnum = {
    Waiting: 'waiting',
    Started: 'started',
    Ended: 'ended'
} as const;
export type GetGameRespStatusEnum = typeof GetGameRespStatusEnum[keyof typeof GetGameRespStatusEnum];


/**
 * Check if a given object implements the GetGameResp interface.
 */
export function instanceOfGetGameResp(value: object): value is GetGameResp {
    if (!('gameId' in value) || value['gameId'] === undefined) return false;
    if (!('gameMode' in value) || value['gameMode'] === undefined) return false;
    if (!('grid' in value) || value['grid'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    return true;
}

export function GetGameRespFromJSON(json: any): GetGameResp {
    return GetGameRespFromJSONTyped(json, false);
}

export function GetGameRespFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetGameResp {
    if (json == null) {
        return json;
    }
    return {
        
        'gameId': json['game_id'],
        'gameMode': GameModeFromJSON(json['game_mode']),
        'grid': json['grid'],
        'status': json['status'],
    };
}

export function GetGameRespToJSON(json: any): GetGameResp {
    return GetGameRespToJSONTyped(json, false);
}

export function GetGameRespToJSONTyped(value?: GetGameResp | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'game_id': value['gameId'],
        'game_mode': GameModeToJSON(value['gameMode']),
        'grid': value['grid'],
        'status': value['status'],
    };
}

